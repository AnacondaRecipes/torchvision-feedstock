{% set version = "0.18.0" %}
# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion
# torchvision requires that CUDA major and minor versions match with pytorch
# https://github.com/pytorch/vision/blob/fa99a5360fbcd1683311d57a76fcc0e7323a4c1e/torchvision/extension.py#L79C1-L85C1
{% set torch_proc_type = "cuda" ~ cuda_compiler_version | replace('.', '') if cuda_compiler_version != "None" else "cpu" %}
# Upstream has specific compatability ranges for pytorch and python which are
# updated every 0.x release. https://github.com/pytorch/vision#installation
{% set compatible_pytorch = "2.3" %}

{% if cuda_compiler_version in (None, "None", True, False) %}
{% set cuda_major = 0 %}
{% else %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.2").split(".")[0] | int %}
{% endif %}

package:
  name: torchvision
  version: {{ version }}

source:
  url: https://github.com/pytorch/vision/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 3e61cbac33986a862a59cd733fd65da8b2c2a6160a66556cfa0e850f62fd43c7
  patches:
    # seems to be necessary for aarch???
    - patches/0001-Monkeypatch-TORCH_LIB_PATH.patch
    # backport https://github.com/pytorch/vision/pull/8463 for numpy 2.0 compat
    - patches/0002-Make-adjust_hue-work-with-numpy-2.0-8463.patch

build:
  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  number: 0
  #skip: true  # [win]
  # no CUDA-enabled pytorch on aarch yet
  skip: true  # [cuda_compiler_version != "None" and aarch64]
  missing_dso_whitelist:
    - "**/libc10.so"              # [linux]
    - "**/libtorch_cpu.so"        # [linux]
    - "**/ld64.so.1"              # [s390x]
    - "**/libc10.dylib"           # [osx]
    - "**/libtorch_cpu.dylib"     # [osx]
    - "**/c10.dll"                # [win]
    - "**/torch_cpu.dll"          # [win]

requirements:
  build:
    #- {{ stdlib('c') }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    {% if cuda_major >= 12 %}
    - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
    - libcublas-dev                          # [build_platform != target_platform]
    - libcusolver-dev                        # [build_platform != target_platform]
    - libcusparse-dev                        # [build_platform != target_platform]
    {% endif %}
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - pytorch ={{ compatible_pytorch }}.*={{ torch_proc_type }}*  # [build_platform != target_platform]
  host:
    - python
    - pip
    - setuptools
    - wheel
    - cudnn                                      # [cuda_compiler_version != "None"]
    {% if cuda_major >= 12 %}                    # [cuda_compiler_version != "None"]
    - libcublas-dev                              # [cuda_compiler_version != "None"]
    - libcusolver-dev                            # [cuda_compiler_version != "None"]
    - libcusparse-dev                            # [cuda_compiler_version != "None"]
    {% endif %}                                  # [cuda_compiler_version != "None"]
    - cudatoolkit {{ cuda_compiler_version }}    # [cuda_compiler_version != "None"]
    - cuda-version {{ cuda_compiler_version }}   # [cuda_compiler_version != "None"]
    # split off image/video into separate outputs?
    - jpeg {{ jpeg }}
    - libpng {{ libpng }}
    # Specify lgpl version of ffmpeg so that there are
    # no quesitons about the license of the resulting binary
    # hmaarrfk: 2022/07, I think that torchvision just has bugs with ffmpeg
    # - ffmpeg {{ ffmpeg }}=lgpl_*
    - numpy
    # exclude 8.3.0 and 8.3.1 specifically due to pytorch/vision#4146, python-pillow/Pillow#5571
    - pillow >=5.3.0,!=8.3.0,!=8.3.1
    #- libtorch
    - pytorch ={{ compatible_pytorch }}.*={{ torch_proc_type }}*
    - requests
  run:
    - python
    - pytorch ={{ compatible_pytorch }}.*={{ torch_proc_type }}*
    - {{ pin_compatible('cudnn') }}           # [cuda_compiler_version != "None"]
    - pillow >=5.3.0,!=8.3.0,!=8.3.1
    - requests
    - __cuda >={{ cuda_compiler_version }}    # [cuda_compiler_version != "None"]

test:
  requires:
    - pip
    - pytest
    #- av
    - expecttest
    - scipy
    - pytest-mock
  source_files:
    - test
    - references
    - pytest.ini
  imports:
    - torchvision
    - torchvision.datasets
    - torchvision.transforms
    - torchvision.models
    - torchvision.utils
  commands:
    - pip check || true      # [not win]
    - pip check || (exit 1)  # [win]
    # # Skip test_url_is_accessible instead of hitting 20+ servers per run, since
    # # each server might be occasionally unresponsive and end up failing our CI
    # {% set tests_to_skip = "test_url_is_accessible" %}

    # # 2022/08/30: Skipping the av tests (they require module 'av'): ModuleNotFoundError: No module named 'av',
    # # because the av package depends on ffmpeg, which we are not requiring as a run requirement because torchvision has bugs with certain ffmpeg versions.
    # {% set tests_to_skip = tests_to_skip + " or test_classes or test_feature_types or test_is_valid_file or test_num_examples or test_smoke or test_str_smoke or test_transforms" %}
    # # 2022/08/30: This test seems to just destroy the memory of the system.
    # # they actually run on most platform except but were still hanging on linux-aarch64 and osx-arm64
    # {% set tests_to_skip = tests_to_skip + " or test_forward_backward" %}
    # {% set tests_to_skip = tests_to_skip + " or test_jit_forward_backward" %}
    # # 2023/07/06: CIs do not have enough resources to run the full suite of model tests
    # # test_extended_models
    # {% set tests_to_skip = tests_to_skip + " or test_get_model or test_get_model_builder or test_get_model_weights" %}
    # {% set tests_to_skip = tests_to_skip + " or test_weights_copyable or test_weights_deserializable or test_list_models" %}
    # {% set tests_to_skip = tests_to_skip + " or test_get_weight or test_naming_conventions or test_schema_meta_validation" %}
    # # from now on something surely needs to be disabled
    # {% set tests_to_skip = tests_to_skip + " or test_transforms_jit or test_no_warn or test_pretrained_pos" %}
    # {% set tests_to_skip = tests_to_skip + " or test_pretrained_kw or test_equivalent_behavior_weights" %}
    # {% set tests_to_skip = tests_to_skip + " or test_multi_params or test_default_callable or test_pretrained_deprecation" %}
    # # spurious failure because upstream skip (Image.__version__ >= "7") does not trigger for Pillow "10"
    # {% set tests_to_skip = tests_to_skip + " or (test_transforms and test_adjust_saturation)" %}
    # # osx warns with nnpack if there is no AVX2, see conda-forge/pytorch-cpu-feedstock#56
    # {% set tests_to_skip = tests_to_skip + " or test_adjust_sharpness" %}  # [osx]
    # # 2022/01/21 hmaarrfk (test_frame_reading)
    # # They indicate that there can be a 1% error in their test.
    # # However, this test seems to causing the CIs to fail when this
    # # case is hit. For example the last CI failed with
    # #
    # # >                   assert mean_delta.item() < 2.5
    # # E                   assert 2.502098560333252 < 2.5
    # {% set tests_to_skip = tests_to_skip + " or test_frame_reading" %}
    # # Random perspective tests can fail if the perspective is too sharp
    # # https://github.com/conda-forge/torchvision-feedstock/issues/38
    # {% set tests_to_skip = tests_to_skip + " or test_randomperspective_fill" %}
    # {% set tests_to_skip = tests_to_skip + " or test_maskrcnn_resnet50_fpn_cpu" %}
    # # Tolerance on the test_frozenbatchnorm2d_eps test seems to be too strict
    # {% set tests_to_skip = tests_to_skip + " or test_frozenbatchnorm2d_eps" %}
    # {% set tests_to_skip = tests_to_skip + " or test_random_apply" %}
    # # 2022/03/29 hmaarrfk
    # # It seems that this test can cause segmentation faults on the CIs.
    # {% set tests_to_skip = tests_to_skip + " or test_write_video_with_audio" %}
    # {% set tests_to_skip = tests_to_skip + " or test_video_clips_custom_fps" %}
    # # 2022/07 hmaarrfk really large memory tests. Fail on CIs
    # {% set tests_to_skip = tests_to_skip + " or test_memory_efficient_densenet" %}
    # {% set tests_to_skip = tests_to_skip + " or test_resnet_dilation" %}
    # {% set tests_to_skip = tests_to_skip + " or test_mobilenet_v2_residual_setting" %}
    # {% set tests_to_skip = tests_to_skip + " or test_mobilenet_norm_layer" %}
    # {% set tests_to_skip = tests_to_skip + " or test_inception_v3_eval" %}
    # {% set tests_to_skip = tests_to_skip + " or test_fasterrcnn_double" %}
    # {% set tests_to_skip = tests_to_skip + " or test_googlenet_eval" %}
    # {% set tests_to_skip = tests_to_skip + " or test_fasterrcnn_switch_devices" %}
    # {% set tests_to_skip = tests_to_skip + " or test_mobilenet_v2_residual_setting" %}
    # {% set tests_to_skip = tests_to_skip + " or test_vitc_models" %}
    # {% set tests_to_skip = tests_to_skip + " or test_classification_model" %}
    # {% set tests_to_skip = tests_to_skip + " or test_segmentation_model" %}
    {% set tests_to_skip = tests_to_skip + " or test_detection_model" %}
    # {% set tests_to_skip = tests_to_skip + " or test_detection_model_validation" %}
    # {% set tests_to_skip = tests_to_skip + " or test_video_model" %}
    {% set tests_to_skip = tests_to_skip + " or test_quantized_classification_model" %}               # [linux]
    # {% set tests_to_skip = tests_to_skip + " or test_detection_model_trainable_backbone_layers" %}
    # {% set tests_to_skip = tests_to_skip + " or test_raft" %}
    # {% set tests_to_skip = tests_to_skip + " or test_build_fx_feature_extractor" %}
    # # 2023/01 These tests fail on newer numpy with module 'numpy' has no attribute 'int'
    # {% set tests_to_skip = tests_to_skip + " or test_transformation_range" %}
    # {% set tests_to_skip = tests_to_skip + " or test_transformation_discrete" %}
    # # 2023/05 The gaussian blur tests are known to be flaky due to some non-determinism on CUDA (see pytorch/vision#6755)
    # {% set tests_to_skip = tests_to_skip + " or test_batched_vs_single" %}
    # # 2023/11 Draw boxes test broken by pillow 1.10.0, but is non-critical and the test is patched upstream (pytorch/vision#8051)
    # {% set tests_to_skip = tests_to_skip + " or test_draw_boxes" %}
    # # 2024/02 These tests assert warnings and in PyTorch 2.1.2 the number of warnings increased
    # # causing them to fail
    # {% set tests_to_skip = tests_to_skip + " or test_pretrained_pos or test_equivalent_behavior_weights" %}
    #- pytest --verbose -k "not ({{ tests_to_skip }})" --durations=50 test/ || true
    # a couple of test errors to do with rank deficiency of an input matrix, probably to do with numerical errors. Very few on osx-64 only - not worth the time to debug IMO.
    {% set tests_to_skip = tests_to_skip + " or test_transform[make_image_pil-1.0] or test_transform[make_image_tensor-1.0]" %}    # [osx and x86_64]
    - pytest --verbose -k "not ({{ tests_to_skip }})" --durations=50 test/ || true

about:
  home: https://pytorch.org/
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: Image and video datasets and models for torch deep learning
  description: |
    The torchvision package consists of popular datasets, model architectures, and common image transformations for computer vision.
  dev_url: https://github.com/pytorch/vision
  doc_url: https://pytorch.org/docs/stable/index.html

extra:
  recipe-maintainers:
    - katietz
    - jjhelmus
    - nehaljwani
    - hmaarrfk
    - h-vetinari
  skip-lints:
    - python_build_tool_in_run
