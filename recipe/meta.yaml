{% set version = "0.20.1" %}
# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion
# torchvision requires that CUDA major and minor versions match with pytorch
# https://github.com/pytorch/vision/blob/fa99a5360fbcd1683311d57a76fcc0e7323a4c1e/torchvision/extension.py#L79C1-L85C1
{% set torch_proc_type = "cuda" ~ cuda_compiler_version | replace('.', '') if cuda_compiler_version != "None" else "cpu" %}
# Upstream has specific compatability ranges for pytorch and python which are
# updated every 0.x release. https://github.com/pytorch/vision#installation
{% set compatible_pytorch = "2.5" %}

package:
  name: torchvision
  version: {{ version }}

source:
  url: https://github.com/pytorch/vision/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 7e08c7f56e2c89859310e53d898f72bccc4987cd83e08cfd6303513da15a9e71
  patches:
    - patches/0003-dont-test-for-turbo-jpeg.patch
    # https://github.com/pytorch/vision/pull/8406/files#r1730151047
    - patches/0001-Use-system-giflib.patch

    - patches/0002-Force-nvjpeg-and-force-failure.patch

    # Can likely remove after 0.20.1
    # https://github.com/pytorch/vision/pull/8776
    - patches/8776_compatibility_with_pyav_14.patch

build:
  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  number: 2
  script_env:
    # required by the setup.py script to find the right version in 0.20.1
    - BUILD_VERSION={{ version }}
  skip: true  # [s390x]
  # no CUDA-enabled pytorch on aarch yet
  skip: true  # [cuda_compiler_version != "None" and aarch64]
  # missing_dso_whitelist:
  #   - "**/libc10.so"              # [linux]
  #   - "**/libtorch_cpu.so"        # [linux]
  #   - "**/libc10_cuda.so"         # [cuda_compiler_version != "None" and linux]
  #   - "**/libtorch_cuda.so"       # [cuda_compiler_version != "None" and linux]
  #   - "**/ld64.so.1"              # [s390x]
  #   - "**/libc10.dylib"           # [osx]
  #   - "**/libtorch_cpu.dylib"     # [osx]
  #   - "**/c10.dll"                # [win]
  #   - "**/torch_cpu.dll"          # [win]

requirements:
  build:
    #- {{ stdlib('c') }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
    - libcublas-dev                          # [build_platform != target_platform and cuda_compiler_version != "None"]
    - libcusolver-dev                        # [build_platform != target_platform and cuda_compiler_version != "None"]
    - libcusparse-dev                        # [build_platform != target_platform and cuda_compiler_version != "None"]
    - libnvjpeg-dev                          # [build_platform != target_platform and cuda_compiler_version != "None"]
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    # - numpy                                  # [build_platform != target_platform]
    - pytorch ={{ compatible_pytorch }}.*={{ torch_proc_type }}*  # [build_platform != target_platform]
  host:
    - python
    # - numpy
    - pip
    - setuptools
    - wheel
    - cudnn                                      # [cuda_compiler_version != "None"]
    - libcublas-dev                              # [cuda_compiler_version != "None"]
    - libcusolver-dev                            # [cuda_compiler_version != "None"]
    - libcusparse-dev                            # [cuda_compiler_version != "None"]
    - libnvjpeg-dev                          # [cuda_compiler_version != "None"]
    # split off image/video into separate outputs?
    - jpeg {{ jpeg }}
    - libpng {{ libpng }}
    - libwebp {{ libwebp }}
    # https://github.com/pytorch/vision/pull/8406/files#r1730151047
    - giflib
    # ffmpeg only supported on linux, and also unsupported on python 3.9: https://github.com/pytorch/vision/blob/v0.20.1/setup.py#L371
    # ffmpeg is detected at buildtime in setup.py, so no build.sh/bld.bat additions required to handle this
    - ffmpeg 6.1.1 # [linux and (py!=39)]
    # exclude 8.3.0 and 8.3.1 specifically due to pytorch/vision#4146, python-pillow/Pillow#5571
    - pillow >=5.3.0,!=8.3.0,!=8.3.1
    - libtorch ={{ compatible_pytorch }}.*=*{{ torch_proc_type }}*
    - pytorch ={{ compatible_pytorch }}.*=*{{ torch_proc_type }}*
    - requests
  run:
    - python
    - pytorch ={{ compatible_pytorch }}.*=*{{ torch_proc_type }}*
    - {{ pin_compatible('cudnn') }}          # [cuda_compiler_version != "None"]
    # They don't really document it, but it seems that they want a minimum version
    # https://github.com/pytorch/vision/blob/v0.19.0/packaging/torchvision/meta.yaml#L26
    - numpy >=1.23.5
    - __cuda >={{ cuda_compiler_version }}    # [cuda_compiler_version != "None"]

test:
  requires:
    - pip
  imports:
    - torchvision
    - torchvision.datasets
    - torchvision.models
    - torchvision.transforms
    - torchvision.utils
  commands:
    # use pip list to manually check that the version is correctly reported
    # Otherwise downstream package's pip check may fail
    - pip list
    - pip list | grep torchvision | grep {{ version }}         # [unix]
    - pip check

outputs:
  - name: torchvision
  - name: torchvision-tests
    test:
      requires:
        - pytest
        - requests
        - av
        - expecttest
        - scipy
        - pytest-mock
        - {{ pin_subpackage('torchvision', exact=True) }}
      source_files:
        - test
        - references
        - pytest.ini
      commands:
        - python test/smoke_test.py
        {% set tests_to_skip = "" %}
        # # Disable all tests that download something, for security reasons. test/test_datasets_download are ignored in the pytest.ini.
        # # This should remove all internet-accessing tests: https://github.com/pytorch/vision/blob/126fc22ce33e6c2426edcf9ed540810c178fe9ce/test/test_internet.py#L1
        # {% set tests_to_skip = "test_internet" %}
        # # Detection models are flaky: https://github.com/pytorch/vision/blob/c2619ba5316a50b6ecb01a9c51d78d2782cfb2dd/test/test_models.py#L845
        # {% set tests_to_skip = tests_to_skip + " or test_detection_model" %}
        # # This is failing on linux-64. The quantized models are expected to be more flaky than unquantized ones: https://github.com/pytorch/vision/issues/4683#issuecomment-948476191
        # {% set tests_to_skip = tests_to_skip + " or test_quantized_classification_model" %}  # [linux]
        # # Two tests here, test_transform[make_image_tensor-1.0] and test_transform[make_image_pil-1.0], fail with the error
        # # "The least squares solution could not be computed because the input matrix does not have full rank", only on osx-64,
        # # with the same tests with different parameters passing.
        # # This is very marginal; could be investigated further but osx-64 is becoming lesser-supported so not worth the time.
        # {% set tests_to_skip = tests_to_skip + " or test_transform" %}  # [osx and x86_64]
        # # These tests run ok on most platforms but exhaust the memory on linux
        # {% set tests_to_skip = tests_to_skip + " or test_forward_backward or test_jit_forward_backward" %}  # [linux]
        # # These give "Windows fatal exception: access violation" on our CI build machines, probably due to memory exhaustion.
        # # They run successfully on a more powerful machine.
        # # Specifically (below is reproducible):
        # # test/test_backbone_utils.py::TestFxFeatureExtraction::test_jit_forward_backward[convnext_base] - python 3.11
        # # test/test_models.py::test_detection_model[cpu-keypointrcnn_resnet50_fpn] - python 3.9
        # # test/test_backbone_utils.py::TestFxFeatureExtraction::test_forward_backward[vit_l_32] - python 3.8 and 3.12
        # {% set tests_to_skip = tests_to_skip + " or test_forward_backward or test_jit_forward_backward" %}  # [win]

        # These are the suggetions from upstream for a set of tests that gives good coverage without running into out of memory issues.
        # They told us the heavy part is probably the models.
        # Some tests_to_skip may not fall into these tests, but the work was done to eliminate single problematic tests
        # so they're all kept in for reference.
        - pytest --disable-socket --verbose --durations=50 -k "not ({{ tests_to_skip }})" test/test_image.py || true
        - pytest --disable-socket --verbose --durations=50 -k "not ({{ tests_to_skip }})" test/test_transforms_v2.py || true
        - pytest --disable-socket --verbose --durations=50 -k "not ({{ tests_to_skip }})" test/test_datasets.py || true
        - pytest --disable-socket --verbose --durations=50 -k "not ({{ tests_to_skip }})" test/test_ops.py || true

about:
  home: https://pytorch.org/
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: Image and video datasets and models for torch deep learning
  description: |
    The torchvision package consists of popular datasets, model architectures, and common image transformations for computer vision.
  dev_url: https://github.com/pytorch/vision
  doc_url: https://pytorch.org/docs/stable/index.html

extra:
  recipe-maintainers:
    - katietz
    - jjhelmus
    - nehaljwani
    - hmaarrfk
    - h-vetinari
  skip-lints:
    - python_build_tool_in_run
